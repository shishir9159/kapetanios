// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.1
// source: proto/minor-upgrade.proto

package proto

import (
	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

// UpgradeClient is the client API for Upgrade service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UpgradeClient interface {
}

type upgradeClient struct {
	cc grpc.ClientConnInterface
}

func NewUpgradeClient(cc grpc.ClientConnInterface) UpgradeClient {
	return &upgradeClient{cc}
}

// UpgradeServer is the server API for Upgrade service.
// All implementations must embed UnimplementedUpgradeServer
// for forward compatibility.
type UpgradeServer interface {
	mustEmbedUnimplementedUpgradeServer()
}

// UnimplementedUpgradeServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUpgradeServer struct{}

func (UnimplementedUpgradeServer) mustEmbedUnimplementedUpgradeServer() {}
func (UnimplementedUpgradeServer) testEmbeddedByValue()                 {}

// UnsafeUpgradeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UpgradeServer will
// result in compilation errors.
type UnsafeUpgradeServer interface {
	mustEmbedUnimplementedUpgradeServer()
}

func RegisterUpgradeServer(s grpc.ServiceRegistrar, srv UpgradeServer) {
	// If the following call pancis, it indicates UnimplementedUpgradeServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Upgrade_ServiceDesc, srv)
}

// Upgrade_ServiceDesc is the grpc.ServiceDesc for Upgrade service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Upgrade_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Upgrade",
	HandlerType: (*UpgradeServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "proto/minor-upgrade.proto",
}

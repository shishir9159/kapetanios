syntax = "proto3";
option go_package = "github.com/shishir9159/kapetanios/proto";

message PrerequisitesMinorUpgrade {
  bool etcdStatus = 1;
  uint64 storageAvailability = 2;
  string log = 3;
  string err = 4;
}

message UpgradeResponse {
  bool proceedNextStep = 1;
  bool terminateApplication = 2;
}

message AvailableVersions {
  repeated string version = 1;
  string err = 2;
}

message ClusterUpgradeResponse {
  bool proceedNextStep = 1;
  bool terminateApplication = 2;
  bool certificateRenewal = 3;
  string version = 4;
}

message UpgradeCompatibility {
  bool osCompatibility = 1;
  string diff = 2;
  string err = 3;
}

message ComponentUpgradeStatus {
  bool componentUpgradeSuccess = 1;
  string component = 2;
  string log = 3;
  string err = 4;
}

message UpgradePlan {
  string currentClusterVersion = 1;
  string log = 2;
  string err = 3;
}

message UpgradeStatus {
  bool upgradeSuccess = 1;
  string log = 2;
  string err = 3;
}

message ComponentRestartStatus {
  bool componentRestartSuccess = 1;
  string component = 2;
  string log = 3;
  string err = 4;
}

message MinorUpgradeFinalizer {
  bool responseReceived = 1;
  bool retryCurrentStep = 2;
}

service MinorUpgrade {
  rpc ClusterHealthChecking(PrerequisitesMinorUpgrade) returns (UpgradeResponse);
  rpc UpgradeVersionSelection(AvailableVersions) returns (ClusterUpgradeResponse);
  rpc ClusterCompatibility(UpgradeCompatibility) returns (UpgradeResponse);
  rpc ClusterComponentUpgrade(ComponentUpgradeStatus) returns (UpgradeResponse);
  rpc ClusterUpgradePlan(UpgradePlan) returns (UpgradeResponse);
  rpc ClusterUpgrade(UpgradeStatus) returns(UpgradeResponse);
  rpc ClusterComponentRestart(ComponentRestartStatus) returns(UpgradeResponse);
  rpc ClusterStatus(UpgradeStatus) returns(MinorUpgradeFinalizer);
}
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.1
// source: proto/rollback.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Rollback_Prerequisites_FullMethodName  = "/Rollback/Prerequisites"
	Rollback_RollbackUpdate_FullMethodName = "/Rollback/RollbackUpdate"
	Rollback_Restarts_FullMethodName       = "/Rollback/Restarts"
)

// RollbackClient is the client API for Rollback service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RollbackClient interface {
	Prerequisites(ctx context.Context, in *PrerequisitesRollback, opts ...grpc.CallOption) (*RollbackResponse, error)
	RollbackUpdate(ctx context.Context, in *RollbackStatus, opts ...grpc.CallOption) (*RollbackResponse, error)
	Restarts(ctx context.Context, in *RollbackRestartStatus, opts ...grpc.CallOption) (*RollbackFinalizer, error)
}

type rollbackClient struct {
	cc grpc.ClientConnInterface
}

func NewRollbackClient(cc grpc.ClientConnInterface) RollbackClient {
	return &rollbackClient{cc}
}

func (c *rollbackClient) Prerequisites(ctx context.Context, in *PrerequisitesRollback, opts ...grpc.CallOption) (*RollbackResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RollbackResponse)
	err := c.cc.Invoke(ctx, Rollback_Prerequisites_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rollbackClient) RollbackUpdate(ctx context.Context, in *RollbackStatus, opts ...grpc.CallOption) (*RollbackResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RollbackResponse)
	err := c.cc.Invoke(ctx, Rollback_RollbackUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rollbackClient) Restarts(ctx context.Context, in *RollbackRestartStatus, opts ...grpc.CallOption) (*RollbackFinalizer, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RollbackFinalizer)
	err := c.cc.Invoke(ctx, Rollback_Restarts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RollbackServer is the server API for Rollback service.
// All implementations must embed UnimplementedRollbackServer
// for forward compatibility.
type RollbackServer interface {
	Prerequisites(context.Context, *PrerequisitesRollback) (*RollbackResponse, error)
	RollbackUpdate(context.Context, *RollbackStatus) (*RollbackResponse, error)
	Restarts(context.Context, *RollbackRestartStatus) (*RollbackFinalizer, error)
	mustEmbedUnimplementedRollbackServer()
}

// UnimplementedRollbackServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRollbackServer struct{}

func (UnimplementedRollbackServer) Prerequisites(context.Context, *PrerequisitesRollback) (*RollbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Prerequisites not implemented")
}
func (UnimplementedRollbackServer) RollbackUpdate(context.Context, *RollbackStatus) (*RollbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RollbackUpdate not implemented")
}
func (UnimplementedRollbackServer) Restarts(context.Context, *RollbackRestartStatus) (*RollbackFinalizer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restarts not implemented")
}
func (UnimplementedRollbackServer) mustEmbedUnimplementedRollbackServer() {}
func (UnimplementedRollbackServer) testEmbeddedByValue()                  {}

// UnsafeRollbackServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RollbackServer will
// result in compilation errors.
type UnsafeRollbackServer interface {
	mustEmbedUnimplementedRollbackServer()
}

func RegisterRollbackServer(s grpc.ServiceRegistrar, srv RollbackServer) {
	// If the following call pancis, it indicates UnimplementedRollbackServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Rollback_ServiceDesc, srv)
}

func _Rollback_Prerequisites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrerequisitesRollback)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RollbackServer).Prerequisites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rollback_Prerequisites_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RollbackServer).Prerequisites(ctx, req.(*PrerequisitesRollback))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rollback_RollbackUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollbackStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RollbackServer).RollbackUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rollback_RollbackUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RollbackServer).RollbackUpdate(ctx, req.(*RollbackStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rollback_Restarts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollbackRestartStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RollbackServer).Restarts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rollback_Restarts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RollbackServer).Restarts(ctx, req.(*RollbackRestartStatus))
	}
	return interceptor(ctx, in, info, handler)
}

// Rollback_ServiceDesc is the grpc.ServiceDesc for Rollback service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Rollback_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Rollback",
	HandlerType: (*RollbackServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Prerequisites",
			Handler:    _Rollback_Prerequisites_Handler,
		},
		{
			MethodName: "RollbackUpdate",
			Handler:    _Rollback_RollbackUpdate_Handler,
		},
		{
			MethodName: "Restarts",
			Handler:    _Rollback_Restarts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/rollback.proto",
}
